<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Book Library PWA</title>
  <link rel="manifest" href="manifest.json">
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <h1>ðŸ“š My Book Library</h1>
  <div id="book-list">
    <!-- Books will be rendered here -->
  </div>

  <script>
    const books = [
      {
        title: "The Great Gatsby",
        author: "F. Scott Fitzgerald",
        year: 1925,
        cover: "https://covers.openlibrary.org/b/id/295577-S.jpg"
      },
      {
        title: "To Kill a Mockingbird",
        author: "Harper Lee",
        year: 1960,
        cover: "https://covers.openlibrary.org/b/id/8225261-S.jpg"
      },
      {
        title: "1984",
        author: "George Orwell",
        year: 1949,
        cover: "https://covers.openlibrary.org/b/id/7222246-S.jpg"
      },
      {
        title: "Pride and Prejudice",
        author: "Jane Austen",
        year: 1813,
        cover: "https://covers.openlibrary.org/b/id/8085735-S.jpg"
      },
      {
        title: "The Catcher in the Rye",
        author: "J.D. Salinger",
        year: 1951,
        cover: "https://covers.openlibrary.org/b/id/8231856-S.jpg"
      }
    ];

    const container = document.getElementById('book-list');
    books.forEach(book => {
      const bookCard = document.createElement('div');
      bookCard.className = 'book';
      bookCard.innerHTML = `
        <img src="${book.cover}" alt="${book.title} cover">
        <h3>${book.title}</h3>
        <p><strong>Author:</strong> ${book.author}</p>
        <p><strong>Year:</strong> ${book.year}</p>
      `;
      container.appendChild(bookCard);
    });

    if ('serviceWorker' in navigator) {
      window.addEventListener('load', () => {
        navigator.serviceWorker.register('service-worker.js')
          .then(reg => console.log('Service Worker registered!', reg))
          .catch(err => console.error('SW registration failed:', err));
      });
    }
  </script>
</body>
</html>




###STYLE.CSS###

body {
  font-family: Arial, sans-serif;
  padding: 20px;
  background: #f5f5f5;
}

h1 {
  text-align: center;
}

#book-list {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
  gap: 20px;
  margin-top: 20px;
}

.book {
  background: white;
  padding: 15px;
  border-radius: 8px;
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
  text-align: center;
}

.book img {
  width: 100px;
  height: 150px;
  object-fit: cover;
}


###MANIFEST.JSON###

{
  "name": "Book Library",
  "short_name": "Books",
  "start_url": ".",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#4a90e2",
  "icons": [
    {
      "src": "icons/icon-192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "icons/icon-512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
}



###SERVICE WORKER.JS###

const CACHE_NAME = 'book-library-cache-v1';
const urlsToCache = [
  '/',
  '/index.html',
  '/style.css',
  '/manifest.json',
  '/service-worker.js'
];

self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      return cache.addAll(urlsToCache);
    })
  );
});

self.addEventListener('fetch', (event) => {
  event.respondWith(
    caches.match(event.request)
      .then(response => response || fetch(event.request))
  );
});

